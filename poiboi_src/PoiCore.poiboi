# Copyright 2021 Brian Coopersmith #
# #
# Licensed under the Apache License, Version 2.0 (the "License"); #
# you may not use this file except in compliance with the License. #
# You may obtain a copy of the License at #
# #
#     https://www.apache.org/licenses/LICENSE-2.0 #
# #
# Unless required by applicable law or agreed to in writing, software #
# distributed under the License is distributed on an "AS IS" BASIS, #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #
# See the License for the specific language governing permissions and #
# limitations under the License. #


# ============================================================================ #
# This file contains various useful utility functions. Note that this and #
# IntMath.poiboi can depend on each other. #
# ============================================================================ #

# Reverse a string. #
PoiCoreReverse(str) {
  result = "";
  WHILE [NOT(EQUAL(str, ""))] {
    result = CONCAT(SUBSTRING(str, "0", "1"), result);
    str = SUBSTRING(str, "1", "");
  }
  RETURN result;
}

# Returns the index of the first instance of substr in str. If this can't be #
# found, returns STRLEN(str). #
PoiCoreFind(str, substr) {
  resultIndex = "0";
  substrLen = STRLEN(substr);
  WHILE [NOT(EQUAL(substr, SUBSTRING(str, "0", substrLen)))] {
    str = SUBSTRING(str, "1", "");
    IF [IntMathLessThan(STRLEN(str), STRLEN(substr))] {
      RETURN STRLEN(str);
    }
    resultIndex = IntMathIncrement(resultIndex);
  }
  RETURN resultIndex;
}

# Returns the index of the first instance of substr in str, restricted to #
# being in the indices [start, end). If unfound, returns STRLEN(str). #
PoiCoreFindBetween(str, substr, start, end) {
  IF [NOT(IntMathIsNonNegativeInt(start))] {
    start = "0";
  }
  IF [NOT(IntMathIsNonNegativeInt(end))] {
    end = STRLEN(str);
  }
  cutStr = SUBSTRING(str, start, end);
  cutStrResult = PoiCoreFind(cutStr, substr);
  IF [EQUAL(cutStrResult, STRLEN(cutStr))] {
    RETURN STRLEN(str);
  }
  RETURN IntMathAdd(cutStrResult, start);
}
